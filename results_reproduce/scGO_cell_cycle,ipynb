{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nCount_RNA</th>\n",
       "      <th>nFeature_RNA</th>\n",
       "      <th>barcode</th>\n",
       "      <th>PDL</th>\n",
       "      <th>sample</th>\n",
       "      <th>exp</th>\n",
       "      <th>S.Score</th>\n",
       "      <th>G2M.Score</th>\n",
       "      <th>Phase</th>\n",
       "      <th>nCount_SCT</th>\n",
       "      <th>nFeature_SCT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AAACGGGAGAGAACAG.1</th>\n",
       "      <td>34927.0</td>\n",
       "      <td>5474</td>\n",
       "      <td>b'AAACGGGAGAGAACAG-1'</td>\n",
       "      <td>b'PDL_25'</td>\n",
       "      <td>b'1'</td>\n",
       "      <td>b'WT'</td>\n",
       "      <td>0.541781</td>\n",
       "      <td>0.209151</td>\n",
       "      <td>b'S'</td>\n",
       "      <td>35623.0</td>\n",
       "      <td>5474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAACGGGGTTTAAGCC.1</th>\n",
       "      <td>35166.0</td>\n",
       "      <td>5426</td>\n",
       "      <td>b'AAACGGGGTTTAAGCC-1'</td>\n",
       "      <td>b'PDL_25'</td>\n",
       "      <td>b'1'</td>\n",
       "      <td>b'WT'</td>\n",
       "      <td>0.404641</td>\n",
       "      <td>0.513172</td>\n",
       "      <td>b'G2M'</td>\n",
       "      <td>35723.0</td>\n",
       "      <td>5426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAACGGGTCCTCATTA.1</th>\n",
       "      <td>36444.0</td>\n",
       "      <td>5749</td>\n",
       "      <td>b'AAACGGGTCCTCATTA-1'</td>\n",
       "      <td>b'PDL_25'</td>\n",
       "      <td>b'1'</td>\n",
       "      <td>b'WT'</td>\n",
       "      <td>-0.009645</td>\n",
       "      <td>0.473208</td>\n",
       "      <td>b'G2M'</td>\n",
       "      <td>36291.0</td>\n",
       "      <td>5748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAACGGGTCTAAGCCA.1</th>\n",
       "      <td>67652.0</td>\n",
       "      <td>6885</td>\n",
       "      <td>b'AAACGGGTCTAAGCCA-1'</td>\n",
       "      <td>b'PDL_25'</td>\n",
       "      <td>b'1'</td>\n",
       "      <td>b'WT'</td>\n",
       "      <td>-0.272565</td>\n",
       "      <td>-0.505199</td>\n",
       "      <td>b'G1'</td>\n",
       "      <td>37575.0</td>\n",
       "      <td>6022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAACGGGTCTGAGGGA.1</th>\n",
       "      <td>7680.0</td>\n",
       "      <td>1920</td>\n",
       "      <td>b'AAACGGGTCTGAGGGA-1'</td>\n",
       "      <td>b'PDL_25'</td>\n",
       "      <td>b'1'</td>\n",
       "      <td>b'WT'</td>\n",
       "      <td>0.347032</td>\n",
       "      <td>0.027671</td>\n",
       "      <td>b'S'</td>\n",
       "      <td>32182.0</td>\n",
       "      <td>4066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGCGCAGGCTCATT.16</th>\n",
       "      <td>19265.0</td>\n",
       "      <td>3947</td>\n",
       "      <td>b'TTTGCGCAGGCTCATT-16'</td>\n",
       "      <td>b'htert_7'</td>\n",
       "      <td>b'16'</td>\n",
       "      <td>b'tert'</td>\n",
       "      <td>0.244858</td>\n",
       "      <td>-0.206021</td>\n",
       "      <td>b'S'</td>\n",
       "      <td>34455.0</td>\n",
       "      <td>4143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGCGCGTGACCAAG.16</th>\n",
       "      <td>25148.0</td>\n",
       "      <td>4123</td>\n",
       "      <td>b'TTTGCGCGTGACCAAG-16'</td>\n",
       "      <td>b'htert_7'</td>\n",
       "      <td>b'16'</td>\n",
       "      <td>b'tert'</td>\n",
       "      <td>-0.163569</td>\n",
       "      <td>-0.256886</td>\n",
       "      <td>b'G1'</td>\n",
       "      <td>34817.0</td>\n",
       "      <td>4137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGCGCGTTAAGATG.16</th>\n",
       "      <td>32849.0</td>\n",
       "      <td>5274</td>\n",
       "      <td>b'TTTGCGCGTTAAGATG-16'</td>\n",
       "      <td>b'htert_7'</td>\n",
       "      <td>b'16'</td>\n",
       "      <td>b'tert'</td>\n",
       "      <td>0.482551</td>\n",
       "      <td>0.123422</td>\n",
       "      <td>b'S'</td>\n",
       "      <td>35182.0</td>\n",
       "      <td>5274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGGTTTCTGAAAGA.16</th>\n",
       "      <td>64737.0</td>\n",
       "      <td>7046</td>\n",
       "      <td>b'TTTGGTTTCTGAAAGA-16'</td>\n",
       "      <td>b'htert_7'</td>\n",
       "      <td>b'16'</td>\n",
       "      <td>b'tert'</td>\n",
       "      <td>-0.094765</td>\n",
       "      <td>0.148554</td>\n",
       "      <td>b'G2M'</td>\n",
       "      <td>37665.0</td>\n",
       "      <td>6365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TTTGTCACATGTTGAC.16</th>\n",
       "      <td>21553.0</td>\n",
       "      <td>4160</td>\n",
       "      <td>b'TTTGTCACATGTTGAC-16'</td>\n",
       "      <td>b'htert_7'</td>\n",
       "      <td>b'16'</td>\n",
       "      <td>b'tert'</td>\n",
       "      <td>0.601660</td>\n",
       "      <td>0.313319</td>\n",
       "      <td>b'S'</td>\n",
       "      <td>34221.0</td>\n",
       "      <td>4274</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12019 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     nCount_RNA  nFeature_RNA                 barcode  \\\n",
       "AAACGGGAGAGAACAG.1      34927.0          5474   b'AAACGGGAGAGAACAG-1'   \n",
       "AAACGGGGTTTAAGCC.1      35166.0          5426   b'AAACGGGGTTTAAGCC-1'   \n",
       "AAACGGGTCCTCATTA.1      36444.0          5749   b'AAACGGGTCCTCATTA-1'   \n",
       "AAACGGGTCTAAGCCA.1      67652.0          6885   b'AAACGGGTCTAAGCCA-1'   \n",
       "AAACGGGTCTGAGGGA.1       7680.0          1920   b'AAACGGGTCTGAGGGA-1'   \n",
       "...                         ...           ...                     ...   \n",
       "TTTGCGCAGGCTCATT.16     19265.0          3947  b'TTTGCGCAGGCTCATT-16'   \n",
       "TTTGCGCGTGACCAAG.16     25148.0          4123  b'TTTGCGCGTGACCAAG-16'   \n",
       "TTTGCGCGTTAAGATG.16     32849.0          5274  b'TTTGCGCGTTAAGATG-16'   \n",
       "TTTGGTTTCTGAAAGA.16     64737.0          7046  b'TTTGGTTTCTGAAAGA-16'   \n",
       "TTTGTCACATGTTGAC.16     21553.0          4160  b'TTTGTCACATGTTGAC-16'   \n",
       "\n",
       "                            PDL sample      exp   S.Score  G2M.Score   Phase  \\\n",
       "AAACGGGAGAGAACAG.1    b'PDL_25'   b'1'    b'WT'  0.541781   0.209151    b'S'   \n",
       "AAACGGGGTTTAAGCC.1    b'PDL_25'   b'1'    b'WT'  0.404641   0.513172  b'G2M'   \n",
       "AAACGGGTCCTCATTA.1    b'PDL_25'   b'1'    b'WT' -0.009645   0.473208  b'G2M'   \n",
       "AAACGGGTCTAAGCCA.1    b'PDL_25'   b'1'    b'WT' -0.272565  -0.505199   b'G1'   \n",
       "AAACGGGTCTGAGGGA.1    b'PDL_25'   b'1'    b'WT'  0.347032   0.027671    b'S'   \n",
       "...                         ...    ...      ...       ...        ...     ...   \n",
       "TTTGCGCAGGCTCATT.16  b'htert_7'  b'16'  b'tert'  0.244858  -0.206021    b'S'   \n",
       "TTTGCGCGTGACCAAG.16  b'htert_7'  b'16'  b'tert' -0.163569  -0.256886   b'G1'   \n",
       "TTTGCGCGTTAAGATG.16  b'htert_7'  b'16'  b'tert'  0.482551   0.123422    b'S'   \n",
       "TTTGGTTTCTGAAAGA.16  b'htert_7'  b'16'  b'tert' -0.094765   0.148554  b'G2M'   \n",
       "TTTGTCACATGTTGAC.16  b'htert_7'  b'16'  b'tert'  0.601660   0.313319    b'S'   \n",
       "\n",
       "                     nCount_SCT  nFeature_SCT  \n",
       "AAACGGGAGAGAACAG.1      35623.0          5474  \n",
       "AAACGGGGTTTAAGCC.1      35723.0          5426  \n",
       "AAACGGGTCCTCATTA.1      36291.0          5748  \n",
       "AAACGGGTCTAAGCCA.1      37575.0          6022  \n",
       "AAACGGGTCTGAGGGA.1      32182.0          4066  \n",
       "...                         ...           ...  \n",
       "TTTGCGCAGGCTCATT.16     34455.0          4143  \n",
       "TTTGCGCGTGACCAAG.16     34817.0          4137  \n",
       "TTTGCGCGTTAAGATG.16     35182.0          5274  \n",
       "TTTGGTTTCTGAAAGA.16     37665.0          6365  \n",
       "TTTGTCACATGTTGAC.16     34221.0          4274  \n",
       "\n",
       "[12019 rows x 11 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import scanpy \n",
    "\n",
    "data=scanpy.read_h5ad(\"data/senescent/GSE175533_sceasy_hay.h5ad\")\n",
    "\n",
    "data.var_names\n",
    "\n",
    "var_names=data.var_names.to_list()\n",
    "\n",
    "var_names=[str(i)[2:-1] for i in var_names]\n",
    "\n",
    "\n",
    "meta_data=data.obs\n",
    "\n",
    "cell_id=meta_data.index.to_list()\n",
    "\n",
    "cell_id=[str(i)[2:-1].replace(\"-\",\".\") for i in cell_id]\n",
    "\n",
    "meta_data.index=cell_id\n",
    "\n",
    "meta_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "Phase=meta_data[\"barcode\"]\n",
    "\n",
    "Phase=Phase.to_list()\n",
    "\n",
    "Phase=[str(i)[2:-1].replace(\"-\",\".\") for i in Phase]\n",
    "\n",
    "meta_data[\"barcode\"]=Phase\n",
    "\n",
    "\n",
    "\n",
    "Phase=meta_data[\"exp\"]\n",
    "\n",
    "Phase=Phase.to_list()\n",
    "\n",
    "Phase=[str(i)[2:-1] for i in Phase]\n",
    "\n",
    "meta_data[\"exp\"]=Phase\n",
    "\n",
    "\n",
    "\n",
    "Phase=meta_data[\"Phase\"]\n",
    "\n",
    "Phase=Phase.to_list()\n",
    "\n",
    "Phase=[str(i)[2:-1] for i in Phase]\n",
    "\n",
    "meta_data[\"Phase\"]=Phase\n",
    "\n",
    "\n",
    "\n",
    "PDL=meta_data[\"PDL\"]\n",
    "\n",
    "PDL=PDL.to_list()\n",
    "\n",
    "PDL=[str(i)[2:-1] for i in PDL]\n",
    "\n",
    "meta_data[\"PDL\"]=PDL\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "phase=meta_data[\"Phase\"].to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 260x230 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 229,
       "width": 260
      }
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/wuyou/.conda/envs/sc/lib/python3.8/site-packages/plotnine/ggplot.py:587: PlotnineWarning: Saving 2.6 x 2.3 in image.\n",
      "/home/wuyou/.conda/envs/sc/lib/python3.8/site-packages/plotnine/ggplot.py:588: PlotnineWarning: Filename: figure/senescence_phase_ground_truth.pdf\n"
     ]
    }
   ],
   "source": [
    "#umap of total dataset\n",
    "\n",
    "\n",
    "from plotnine import *\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "black = '#222222'\n",
    "gray = '#666666'\n",
    "red = '#FF3333'\n",
    "green = '#66CC00'\n",
    "blue = '#3333FF'\n",
    "purple = '#9933FF'\n",
    "orange = '#FF8000'\n",
    "yellow = '#FFFF33'\n",
    "salmen = \"#FA8072\"\n",
    "limegreen = '#32CD32'\n",
    "deepskyblue = '#00AFEE'\n",
    "c1=\"#F8766D\"\n",
    "c2=\"#00BA38\"\n",
    "c3=\"#619CFF\"\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "embedding = data.obsm[\"X_umap\"]\n",
    "\n",
    "plot_data=pd.DataFrame(embedding,columns=[\"UMAP1\",\"UMAP2\"])\n",
    "\n",
    "plot_data[\"phase\"]=phase\n",
    "\n",
    "#plot_data[\"score\"]=score\n",
    "\n",
    "p =(ggplot()\n",
    "    + geom_point(plot_data, aes(x='UMAP1', y='UMAP2', color=\"phase\"),size=0.001,stroke=0.3,alpha=1)\n",
    "    #+ geom_point(data_not_indrop, aes(x='UMAP1', y='UMAP2',color=\"factor(Technology)\"),size=0.001,alpha=1)\n",
    "    +theme(\n",
    "        figure_size=[2.6,2.3],\n",
    "        axis_text=element_text(size=6,family=\"Arial\",color=\"black\"),\n",
    "        axis_title_x=element_text(size=6,family=\"Arial\",color=\"black\"),\n",
    "        axis_title_y=element_text(size=6,family=\"Arial\",color=\"black\"),\n",
    "        plot_title=element_text(margin={'b': 1, 'r': 0, 'units': 'pt'},size=6,family=\"Arial\",color=\"black\",hjust=0.5),\n",
    "        panel_background=element_rect(fill=gray, alpha=0),\n",
    "        panel_grid_major=element_line(size=0.3, alpha=0.0,color=black),\n",
    "        panel_grid_minor=element_line(size=0.3, alpha=0.0,color=black),\n",
    "        panel_border=element_rect(color=black, size=1),\n",
    "        legend_title = element_text(size=6,alpha=0), #change legend title font size\n",
    "        legend_text = element_text(size=6),\n",
    "        legend_background=element_rect(size=0.5,alpha=0),\n",
    "        #legend_position=(0.75,0.9), \n",
    "        legend_direction='vertical',\n",
    "        #legend_position='right',\n",
    "        legend_key_size=4) #change legend text font size))\n",
    "    #+scale_color_manual(values =[c1, c2, c3]) \n",
    "    #+geom_density_2d(colour = \"#F8766D\",size=0.2,data=data_U,alpha=0.5)\n",
    "    #+geom_density_2d(colour = \"#00BA38\",size=0.2,data=data_psU,alpha=0.5)\n",
    "    +ggtitle(\"Cell cycle phase\")\n",
    "    #+scale_color_gradient(low=deepskyblue , high=yellow,mid=c2)\n",
    "    #+scale_color_gradient(low=purple , high=\"yellow\",mid=c2)\n",
    "    #+scale_color_manual(values=['#66C2A4', '#B2DF8A', '#2CA25F'])  \n",
    "    #+scale_color_manual(values=['#bfff7f', '#ffff7f', '#ffbf7f'])  \n",
    "   )\n",
    "#+ facet_wrap('G')\n",
    "print(p)\n",
    "p.save('figure/senescence_phase_ground_truth.pdf')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cell cycle phase\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MIR1302-2HG</th>\n",
       "      <th>FAM138A</th>\n",
       "      <th>OR4F5</th>\n",
       "      <th>AL627309.1</th>\n",
       "      <th>AL627309.3</th>\n",
       "      <th>AL627309.2</th>\n",
       "      <th>AL627309.4</th>\n",
       "      <th>AL732372.1</th>\n",
       "      <th>OR4F29</th>\n",
       "      <th>AC114498.1</th>\n",
       "      <th>...</th>\n",
       "      <th>AC007325.2</th>\n",
       "      <th>BX072566.1</th>\n",
       "      <th>AL354822.1</th>\n",
       "      <th>AC023491.2</th>\n",
       "      <th>AC004556.1</th>\n",
       "      <th>AC233755.2</th>\n",
       "      <th>AC233755.1</th>\n",
       "      <th>AC240274.1</th>\n",
       "      <th>AC213203.1</th>\n",
       "      <th>FAM231C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12014</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12015</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12016</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12017</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12018</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12019 rows × 33538 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       MIR1302-2HG  FAM138A  OR4F5  AL627309.1  AL627309.3  AL627309.2  \\\n",
       "0              0.0      0.0    0.0         0.0         0.0         0.0   \n",
       "1              0.0      0.0    0.0         0.0         0.0         0.0   \n",
       "2              0.0      0.0    0.0         0.0         0.0         0.0   \n",
       "3              0.0      0.0    0.0         0.0         0.0         0.0   \n",
       "4              0.0      0.0    0.0         0.0         0.0         0.0   \n",
       "...            ...      ...    ...         ...         ...         ...   \n",
       "12014          0.0      0.0    0.0         0.0         0.0         0.0   \n",
       "12015          0.0      0.0    0.0         0.0         0.0         0.0   \n",
       "12016          0.0      0.0    0.0         0.0         0.0         0.0   \n",
       "12017          0.0      0.0    0.0         0.0         0.0         0.0   \n",
       "12018          0.0      0.0    0.0         0.0         0.0         0.0   \n",
       "\n",
       "       AL627309.4  AL732372.1  OR4F29  AC114498.1  ...  AC007325.2  \\\n",
       "0             0.0         0.0     0.0         0.0  ...         0.0   \n",
       "1             0.0         0.0     0.0         0.0  ...         0.0   \n",
       "2             0.0         0.0     0.0         0.0  ...         0.0   \n",
       "3             0.0         0.0     0.0         0.0  ...         0.0   \n",
       "4             0.0         0.0     0.0         0.0  ...         0.0   \n",
       "...           ...         ...     ...         ...  ...         ...   \n",
       "12014         0.0         0.0     0.0         0.0  ...         0.0   \n",
       "12015         0.0         0.0     0.0         0.0  ...         0.0   \n",
       "12016         0.0         0.0     0.0         0.0  ...         0.0   \n",
       "12017         0.0         0.0     0.0         0.0  ...         0.0   \n",
       "12018         0.0         0.0     0.0         0.0  ...         0.0   \n",
       "\n",
       "       BX072566.1  AL354822.1  AC023491.2  AC004556.1  AC233755.2  AC233755.1  \\\n",
       "0             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "1             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "3             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "4             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "...           ...         ...         ...         ...         ...         ...   \n",
       "12014         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "12015         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "12016         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "12017         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "12018         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "\n",
       "       AC240274.1  AC213203.1  FAM231C  \n",
       "0             0.0         0.0      0.0  \n",
       "1             0.0         0.0      0.0  \n",
       "2             0.0         0.0      0.0  \n",
       "3             0.0         0.0      0.0  \n",
       "4             0.0         0.0      0.0  \n",
       "...           ...         ...      ...  \n",
       "12014         0.0         0.0      0.0  \n",
       "12015         0.0         0.0      0.0  \n",
       "12016         0.0         0.0      0.0  \n",
       "12017         0.0         0.0      0.0  \n",
       "12018         0.0         0.0      0.0  \n",
       "\n",
       "[12019 rows x 33538 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "data=pd.DataFrame(data.X.toarray(),columns=var_names)\n",
    "\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33538\n",
      "6800\n"
     ]
    }
   ],
   "source": [
    "data_sparse=data\n",
    "\n",
    "\n",
    "#statistics of cells expressing each gene\n",
    "gene_expressed_cell_number=data_sparse.astype(bool).sum(axis=0)\n",
    "\n",
    "print(len(gene_expressed_cell_number))\n",
    "#filter gene expressed in less than 10 cells\n",
    "gene_expressed_cell_number=gene_expressed_cell_number[gene_expressed_cell_number>4000]\n",
    "print(len(gene_expressed_cell_number))\n",
    "\n",
    "data_rm_sparse=data_sparse[gene_expressed_cell_number.index.tolist()]\n",
    "data_rm_sparse.shape           #10k cells, 4487 genes\n",
    "\n",
    "full_data=data_rm_sparse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "base_dir=\"data/senescent\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1209"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pickle\n",
    "TF_gene_dict=pickle.load(open(\"human/TF_gene_dict\",\"rb\"))\n",
    "\n",
    "len(TF_gene_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#generate gene_to_TF_transform_matrix\n",
    "import numpy as np\n",
    "import pickle\n",
    "\n",
    "TF_gene_dict=pickle.load(open(\"human/TF_gene_dict\",\"rb\"))\n",
    "\n",
    "\n",
    "gene_number=len(data_rm_sparse.columns.to_list())    \n",
    "\n",
    "TF_number=len(TF_gene_dict)\n",
    "\n",
    "gene_to_TF_transform_matrix=np.zeros((gene_number,TF_number))\n",
    "\n",
    "TF_list=TF_gene_dict.keys()\n",
    "for i,gene in enumerate(data_rm_sparse.columns):\n",
    "    try:\n",
    "        j=TF_list.index(\"gene\")\n",
    "        gene_to_TF_transform_matrix[i][j]=1\n",
    "    except:\n",
    "        pass\n",
    "        \n",
    "gene_to_TF_transform_matrix\n",
    "\n",
    "pickle.dump(gene_to_TF_transform_matrix,open(\"%s/gene_to_TF_transform_matrix\" %base_dir,\"wb\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5252906\n",
      "[[1. 1. 1. ... 0. 0. 0.]\n",
      " [1. 1. 1. ... 0. 0. 0.]\n",
      " [1. 0. 1. ... 0. 0. 0.]\n",
      " ...\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "#generate TF_mask\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "gene_TF_dict=pickle.load(open(\"human/gene_TF_dict\",\"rb\"))\n",
    "\n",
    "gene_number = len(data_rm_sparse.columns.to_list())    #6033\n",
    "TF_number = len(TF_gene_dict)\n",
    "\n",
    "TF_mask = np.zeros((gene_number,TF_number))\n",
    "error_count=0\n",
    "\n",
    "for i,gene_id in enumerate(data_rm_sparse.columns):\n",
    "\n",
    "    for j,TF in enumerate(TF_gene_dict):\n",
    "        if TF in gene_TF_dict.get(gene_id,[]):\n",
    "            TF_mask[i][j]=1\n",
    "        else:\n",
    "            error_count+=1\n",
    "        \n",
    "print(error_count)\n",
    "print(TF_mask)\n",
    "\n",
    "pickle.dump(TF_mask,open(\"%s/TF_mask\" %base_dir,\"wb\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1946\n",
      "Total GO number: 1946\n",
      "13146694\n"
     ]
    }
   ],
   "source": [
    "#generate GO_mask\n",
    "\n",
    "GO_dict={}\n",
    "with open(\"human/goa_human.gaf\") as f:\n",
    "    for line in f:\n",
    "        if line[0] == \"!\":\n",
    "            continue\n",
    "        \n",
    "        gene_id=line.split(\"\\t\")[2]\n",
    "        GO_term=line.split(\"\\t\")[4]\n",
    "        if GO_term not in GO_dict:\n",
    "            GO_dict[GO_term]=[]\n",
    "        GO_dict[GO_term].append(gene_id)\n",
    "\n",
    "\n",
    "GO_list=[]\n",
    "count=0\n",
    "for item in GO_dict:\n",
    "    if len(GO_dict[item])>=30:\n",
    "        count+=1\n",
    "        GO_list.append(item)\n",
    "print(count)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "print(\"Total GO number:\",len(GO_list))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "gene_dict={}\n",
    "with open(\"human/goa_human.gaf\") as f:\n",
    "    for line in f:\n",
    "        if line[0]==\"!\":\n",
    "            continue\n",
    "        gene_id=line.split(\"\\t\")[2].upper()\n",
    "        GO_term=line.split(\"\\t\")[4]\n",
    "        if gene_id not in gene_dict:\n",
    "            gene_dict[gene_id]=[]\n",
    "        gene_dict[gene_id].append(GO_term)\n",
    "\n",
    "\n",
    "\n",
    "gene_number=len(data_rm_sparse.columns)    #6033\n",
    "GO_number=len(GO_list)  \n",
    "\n",
    "GO_mask=np.zeros((gene_number,GO_number))\n",
    "error_count=0\n",
    "\n",
    "for i,gene_id in enumerate(data_rm_sparse.columns):\n",
    "\n",
    "    for j,GO_term in enumerate(GO_list):\n",
    "        if GO_term in gene_dict.get(gene_id,\"GO:default\"):\n",
    "\n",
    "            GO_mask[i][j]=1\n",
    "        else:\n",
    "            error_count+=1\n",
    "        \n",
    "print(error_count)\n",
    "\n",
    "pickle.dump(GO_mask,open(\"%s/GO_mask\" %base_dir,\"wb\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2332169\n"
     ]
    }
   ],
   "source": [
    "#generate GO_TF_mask\n",
    "\n",
    "TF_number=len(TF_gene_dict)\n",
    "GO_number=len(GO_list) \n",
    "\n",
    "GO_TF_mask=np.zeros((TF_number,GO_number))\n",
    "error_count=0\n",
    "\n",
    "for i,TF in enumerate(TF_gene_dict):\n",
    "    for j,GO in enumerate(GO_list):\n",
    "        if GO in gene_dict.get(TF,\"GO:default\"):\n",
    "            GO_TF_mask[i][j]=1\n",
    "        else:\n",
    "            error_count+=1\n",
    "print(error_count)\n",
    "        \n",
    "GO_TF_mask\n",
    "\n",
    "pickle.dump(GO_TF_mask,open(\"%s/GO_TF_mask\" %base_dir,\"wb\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fold 1-0 \taccuracy:\t 0.9392678868552413 \tloss:\t 0.3386556877529029  \tf1 score:\t 0 \ttime:\t 46.21684193611145\n",
      "fold 1-1 \taccuracy:\t 0.9130615640599001 \tloss:\t 0.15234228536509764  \tf1 score:\t 0 \ttime:\t 34.576674938201904\n",
      "fold 1-2 \taccuracy:\t 0.9538269550748752 \tloss:\t 0.08977454782735488  \tf1 score:\t 0 \ttime:\t 41.609222412109375\n",
      "fold 1-3 \taccuracy:\t 0.8972545757071547 \tloss:\t 0.05074479482396974  \tf1 score:\t 0 \ttime:\t 42.70259881019592\n",
      "fold 1-4 \taccuracy:\t 0.9475873544093179 \tloss:\t 0.05480243154419644  \tf1 score:\t 0 \ttime:\t 30.252742528915405\n",
      "fold 1-5 \taccuracy:\t 0.9492512479201332 \tloss:\t 0.032634599231941314  \tf1 score:\t 0 \ttime:\t 26.065587282180786\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[26], line 454\u001b[0m\n\u001b[1;32m    445\u001b[0m \u001b[38;5;66;03m#reconstraction_input=reconstraction_model(outputs)\u001b[39;00m\n\u001b[1;32m    446\u001b[0m \u001b[38;5;66;03m#reconstraction_loss = reconstraction_criterion(reconstraction_input, inputs)\u001b[39;00m\n\u001b[1;32m    447\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    450\u001b[0m \u001b[38;5;66;03m#combined_loss=loss+reconstraction_loss\u001b[39;00m\n\u001b[1;32m    451\u001b[0m \u001b[38;5;66;03m#combined_loss.backward()\u001b[39;00m\n\u001b[1;32m    452\u001b[0m loss\u001b[38;5;241m.\u001b[39mbackward()\n\u001b[0;32m--> 454\u001b[0m \u001b[43moptimizer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstep\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    455\u001b[0m \u001b[38;5;66;03m#reconstraction_optimizer.step()\u001b[39;00m\n\u001b[1;32m    456\u001b[0m \n\u001b[1;32m    457\u001b[0m \n\u001b[1;32m    458\u001b[0m \u001b[38;5;66;03m#reconstraction_running_loss += reconstraction_loss.item()\u001b[39;00m\n\u001b[1;32m    459\u001b[0m running_loss \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m loss\u001b[38;5;241m.\u001b[39mitem()\n",
      "File \u001b[0;32m~/.conda/envs/sc/lib/python3.8/site-packages/torch/optim/optimizer.py:140\u001b[0m, in \u001b[0;36mOptimizer._hook_for_profile.<locals>.profile_hook_step.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    138\u001b[0m profile_name \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mOptimizer.step#\u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.step\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(obj\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m)\n\u001b[1;32m    139\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mautograd\u001b[38;5;241m.\u001b[39mprofiler\u001b[38;5;241m.\u001b[39mrecord_function(profile_name):\n\u001b[0;32m--> 140\u001b[0m     out \u001b[38;5;241m=\u001b[39m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    141\u001b[0m     obj\u001b[38;5;241m.\u001b[39m_optimizer_step_code()\n\u001b[1;32m    142\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m out\n",
      "File \u001b[0;32m~/.conda/envs/sc/lib/python3.8/site-packages/torch/optim/optimizer.py:23\u001b[0m, in \u001b[0;36m_use_grad_for_differentiable.<locals>._use_grad\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m     22\u001b[0m     torch\u001b[38;5;241m.\u001b[39mset_grad_enabled(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdefaults[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdifferentiable\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[0;32m---> 23\u001b[0m     ret \u001b[38;5;241m=\u001b[39m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     24\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m     25\u001b[0m     torch\u001b[38;5;241m.\u001b[39mset_grad_enabled(prev_grad)\n",
      "File \u001b[0;32m~/.conda/envs/sc/lib/python3.8/site-packages/torch/optim/adam.py:234\u001b[0m, in \u001b[0;36mAdam.step\u001b[0;34m(self, closure, grad_scaler)\u001b[0m\n\u001b[1;32m    231\u001b[0m                 \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mRuntimeError\u001b[39;00m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m`requires_grad` is not supported for `step` in differentiable mode\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    232\u001b[0m             state_steps\u001b[38;5;241m.\u001b[39mappend(state[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstep\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[0;32m--> 234\u001b[0m     \u001b[43madam\u001b[49m\u001b[43m(\u001b[49m\u001b[43mparams_with_grad\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    235\u001b[0m \u001b[43m         \u001b[49m\u001b[43mgrads\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[43m         \u001b[49m\u001b[43mexp_avgs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    237\u001b[0m \u001b[43m         \u001b[49m\u001b[43mexp_avg_sqs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    238\u001b[0m \u001b[43m         \u001b[49m\u001b[43mmax_exp_avg_sqs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    239\u001b[0m \u001b[43m         \u001b[49m\u001b[43mstate_steps\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    240\u001b[0m \u001b[43m         \u001b[49m\u001b[43mamsgrad\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgroup\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mamsgrad\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    241\u001b[0m \u001b[43m         \u001b[49m\u001b[43mbeta1\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbeta1\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    242\u001b[0m \u001b[43m         \u001b[49m\u001b[43mbeta2\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbeta2\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    243\u001b[0m \u001b[43m         \u001b[49m\u001b[43mlr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgroup\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mlr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    244\u001b[0m \u001b[43m         \u001b[49m\u001b[43mweight_decay\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgroup\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mweight_decay\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    245\u001b[0m \u001b[43m         \u001b[49m\u001b[43meps\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgroup\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43meps\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    246\u001b[0m \u001b[43m         \u001b[49m\u001b[43mmaximize\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgroup\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mmaximize\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    247\u001b[0m \u001b[43m         \u001b[49m\u001b[43mforeach\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgroup\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mforeach\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    248\u001b[0m \u001b[43m         \u001b[49m\u001b[43mcapturable\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgroup\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mcapturable\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    249\u001b[0m \u001b[43m         \u001b[49m\u001b[43mdifferentiable\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgroup\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mdifferentiable\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    250\u001b[0m \u001b[43m         \u001b[49m\u001b[43mfused\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgroup\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mfused\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    251\u001b[0m \u001b[43m         \u001b[49m\u001b[43mgrad_scale\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgrad_scale\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    252\u001b[0m \u001b[43m         \u001b[49m\u001b[43mfound_inf\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfound_inf\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    254\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m loss\n",
      "File \u001b[0;32m~/.conda/envs/sc/lib/python3.8/site-packages/torch/optim/adam.py:300\u001b[0m, in \u001b[0;36madam\u001b[0;34m(params, grads, exp_avgs, exp_avg_sqs, max_exp_avg_sqs, state_steps, foreach, capturable, differentiable, fused, grad_scale, found_inf, amsgrad, beta1, beta2, lr, weight_decay, eps, maximize)\u001b[0m\n\u001b[1;32m    297\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    298\u001b[0m     func \u001b[38;5;241m=\u001b[39m _single_tensor_adam\n\u001b[0;32m--> 300\u001b[0m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mparams\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    301\u001b[0m \u001b[43m     \u001b[49m\u001b[43mgrads\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    302\u001b[0m \u001b[43m     \u001b[49m\u001b[43mexp_avgs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    303\u001b[0m \u001b[43m     \u001b[49m\u001b[43mexp_avg_sqs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    304\u001b[0m \u001b[43m     \u001b[49m\u001b[43mmax_exp_avg_sqs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    305\u001b[0m \u001b[43m     \u001b[49m\u001b[43mstate_steps\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    306\u001b[0m \u001b[43m     \u001b[49m\u001b[43mamsgrad\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mamsgrad\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    307\u001b[0m \u001b[43m     \u001b[49m\u001b[43mbeta1\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbeta1\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    308\u001b[0m \u001b[43m     \u001b[49m\u001b[43mbeta2\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbeta2\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    309\u001b[0m \u001b[43m     \u001b[49m\u001b[43mlr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlr\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    310\u001b[0m \u001b[43m     \u001b[49m\u001b[43mweight_decay\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mweight_decay\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    311\u001b[0m \u001b[43m     \u001b[49m\u001b[43meps\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43meps\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    312\u001b[0m \u001b[43m     \u001b[49m\u001b[43mmaximize\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmaximize\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    313\u001b[0m \u001b[43m     \u001b[49m\u001b[43mcapturable\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcapturable\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    314\u001b[0m \u001b[43m     \u001b[49m\u001b[43mdifferentiable\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdifferentiable\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    315\u001b[0m \u001b[43m     \u001b[49m\u001b[43mgrad_scale\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgrad_scale\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    316\u001b[0m \u001b[43m     \u001b[49m\u001b[43mfound_inf\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfound_inf\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/.conda/envs/sc/lib/python3.8/site-packages/torch/optim/adam.py:412\u001b[0m, in \u001b[0;36m_single_tensor_adam\u001b[0;34m(params, grads, exp_avgs, exp_avg_sqs, max_exp_avg_sqs, state_steps, grad_scale, found_inf, amsgrad, beta1, beta2, lr, weight_decay, eps, maximize, capturable, differentiable)\u001b[0m\n\u001b[1;32m    409\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    410\u001b[0m     denom \u001b[38;5;241m=\u001b[39m (exp_avg_sq\u001b[38;5;241m.\u001b[39msqrt() \u001b[38;5;241m/\u001b[39m bias_correction2_sqrt)\u001b[38;5;241m.\u001b[39madd_(eps)\n\u001b[0;32m--> 412\u001b[0m \u001b[43mparam\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43maddcdiv_\u001b[49m\u001b[43m(\u001b[49m\u001b[43mexp_avg\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdenom\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalue\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m-\u001b[39;49m\u001b[43mstep_size\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "#GO_Net\n",
    "import math\n",
    "import time\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import pickle\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torch.autograd import Variable\n",
    "from sklearn.model_selection import train_test_split as ts\n",
    "\n",
    "data_rm_sparse=data_rm_sparse\n",
    "\n",
    "data_rm_sparse.index=phase\n",
    "\n",
    "###############################################################\n",
    "gene_to_TF_transform_matrix=pickle.load(open(\"%s/gene_to_TF_transform_matrix\" %base_dir,\"rb\"))\n",
    "TF_mask=pickle.load(open(\"%s/TF_mask\" %base_dir,\"rb\"))\n",
    "GO_mask=pickle.load(open(\"%s/GO_mask\" %base_dir,\"rb\"))\n",
    "GO_TF_mask=pickle.load(open(\"%s/GO_TF_mask\" %base_dir,\"rb\"))\n",
    "###############################################################\n",
    "#data_annotation = pd.read_csv('data/macparland/GSE115469_CellClusterType.txt', sep=\"\\t\")\n",
    "#index_rename_dict = {key: value for key, value in zip(data_annotation['CellName'], data_annotation['CellType'])}\n",
    "#$data_rm_sparse=data_rm_sparse.rename(index=index_rename_dict)\n",
    "\n",
    "#normalize by row\n",
    "#data_rm_sparse = data_rm_sparse.apply(lambda row: row / np.linalg.norm(row), axis=1)\n",
    "\n",
    "#merge similar cell types\n",
    "#data_rm_sparse.index = data_rm_sparse.index.str.replace('Hepatocyte_\\d+', 'Hepatocyte', regex=True)\n",
    "#data_rm_sparse.index = data_rm_sparse.index.str.replace('gamma-delta_T_Cells_\\d+', 'gamma-delta_T_Cells', regex=True)\n",
    "\n",
    "\n",
    "#filter low count cells\n",
    "#data_rm_sparse = data_rm_sparse[data_rm_sparse.index != 'Hepatic_Stellate_Cells']\n",
    "\n",
    "\n",
    "#novel_cell_type = ['Plasma_Cells']\n",
    "\n",
    "#data_rm_sparse_novel = data_rm_sparse[data_rm_sparse.index.isin(novel_cell_type)]\n",
    "#data_rm_sparse_rest = data_rm_sparse[~data_rm_sparse.index.isin(novel_cell_type)]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "classes=[]\n",
    "for celltype in data_rm_sparse.index:\n",
    "    if celltype not in classes:\n",
    "        classes.append(celltype)\n",
    "#print(len(classes),classes)\n",
    "\n",
    "\n",
    "label_dict_revese={}\n",
    "label_dict={}\n",
    "for i,celltype in enumerate(classes):\n",
    "    label_dict[celltype]=i\n",
    "    label_dict_revese[i]=celltype\n",
    "label_dict\n",
    "################################################################\n",
    "\n",
    "\n",
    "\n",
    "def gen_mask(row,col,percent=0.5,num_zeros=None):\n",
    "    if num_zeros is None:\n",
    "        #Total number being masked is 0.5 by default\n",
    "        num_zeros=int((row*col)*percent)\n",
    "    \n",
    "    mask=np.hstack([np.zeros(num_zeros),np.ones(row*col-num_zeros)])\n",
    "    np.random.shuffle(mask)\n",
    "    return mask.reshape(row,col)\n",
    "\n",
    "class LinearFunction(torch.autograd.Function):\n",
    "    \"\"\"\n",
    "    autograd function which masks it's weights by 'mask'.\n",
    "    \"\"\"\n",
    "    \n",
    "    #Not that both forward and backword are @staticmethod\n",
    "\n",
    "    \n",
    "    #bias, mask is an optional argument\n",
    "    @staticmethod\n",
    "    def forward(ctx, input, weight, bias=None, mask=None):\n",
    "        if mask is not None:\n",
    "            #change weight to 0 where mask == 0\n",
    "\n",
    "            weight=weight*mask\n",
    " \n",
    "        output=input.mm(weight.t())\n",
    "\n",
    "        if bias is not None:\n",
    "            output+=bias.unsqueeze(0).expand_as(output)\n",
    "        \n",
    "        ctx.save_for_backward(input, weight, bias, mask)\n",
    "\n",
    "        return output\n",
    "    \n",
    "    #This function has noly a single output, so it gets only one gradient\n",
    "    @staticmethod\n",
    "    def backward(ctx,grad_output):\n",
    "        input,weight,bias,mask = ctx.saved_tensors\n",
    "        grad_input=grad_weight=grad_bias=grad_mask=None\n",
    "        \n",
    "        #These meeds_input_grad checks are optional and there only to improve efficiency.\n",
    "        #If you want to make your code simpler, you can skip them. Returning gradients for\n",
    "        #inputs that don't require it is not an error.\n",
    "        if ctx.needs_input_grad[0]:\n",
    "            grad_input=grad_output.mm(weight)\n",
    "        \n",
    "        if ctx.needs_input_grad[1]:\n",
    "            grad_weight=grad_output.t().mm(input)\n",
    "            \n",
    "            if mask is not None:\n",
    "                \n",
    "                #change grad_weight to 0 where mask == 0\n",
    "                grad_weight=grad_weight*mask\n",
    "\n",
    "        \n",
    "        #if bias is not None and ctx.need_input_grad[2]:\n",
    "        if ctx.needs_input_grad[2]:\n",
    "            grad_bias=grad_output.sum(0).squeeze(0)\n",
    "        \n",
    "        return grad_input,grad_weight,grad_bias,grad_mask\n",
    "    \n",
    "\n",
    "       \n",
    "class CustomizedLinear(nn.Module):\n",
    "    def __init__(self,input_features,output_features, bias=None, mask=None):\n",
    "        \"\"\"\n",
    "        Arguments\n",
    "        mask [numpy array]:\n",
    "            The shape is (n_input_fearues,n_output_features).\n",
    "            The elements are 0 or 1 which delcare un-connected or connected.\n",
    "            \n",
    "        bias [bool]:\n",
    "            flg of bias.\n",
    "        \"\"\"\n",
    "        super(CustomizedLinear,self).__init__()\n",
    "        self.input_features=input_features\n",
    "        self.out_features=output_features\n",
    "        \n",
    "        #nn.Parameter is a spetial kind of Tensor, that will get\n",
    "        #automatically registered as Module's parameter once it's assigned\n",
    "        #as an attribute\n",
    "        self.weight=nn.Parameter(torch.Tensor(self.out_features,self.input_features))\n",
    "        \n",
    "        if bias:\n",
    "\n",
    "            self.bias=nn.Parameter(torch.Tensor(self.out_features))\n",
    "        else:\n",
    "            #You should always register all possible parameters, but the\n",
    "            #optinal ones can be None if you want.\n",
    "            self.register_parameter(\"bias\",None)\n",
    "            \n",
    "        #Initialize the above parameters (weight and bias). Important!\n",
    "        self.init_params()\n",
    "        \n",
    "        #mask should be registered after weight and bias\n",
    "        if mask is not None:\n",
    "            mask=torch.tensor(mask,dtype=torch.float).t()\n",
    "            self.mask=nn.Parameter(mask,requires_grad=False)\n",
    "        else:\n",
    "            self.register_parameter(\"mask\",None)\n",
    "\n",
    "        \n",
    "    def init_params(self):\n",
    "        stdv=1./math.sqrt(self.weight.size(1))\n",
    "        self.weight.data.uniform_(-stdv,stdv)\n",
    "        if self.bias is not None:\n",
    "            self.bias.data.uniform_(-stdv,stdv)\n",
    "                \n",
    "    def forward(self,input):\n",
    "        #See the autograd section for explanation of what happens here.\n",
    "        \n",
    "        output=LinearFunction.apply(input,self.weight,self.bias,self.mask)\n",
    "        \n",
    "        return output\n",
    "        \n",
    "    def extra_repr(self):\n",
    "        #(Optional) Set the extra informatioin about this module. You can test\n",
    "        #it by printing an object of this class.\n",
    "        return \"input_features={}, output_features={}, bias={}, mask={}\".format(\n",
    "            self.input_features, self.out_features,\n",
    "            self.bias is not None, self.mask is not None)\n",
    "        \n",
    "        \n",
    "class GO_Net(nn.Module):\n",
    "    def __init__(self,in_size,out_size,ratio=[0.006525,0,0]):\n",
    "        super(GO_Net,self).__init__()\n",
    "\n",
    "        self.gene_number=len(data_rm_sparse.columns)    #6033\n",
    "        self.TF_number=1209\n",
    "        self.GO_number=len(GO_list)\n",
    "        self.class_number=3\n",
    "\n",
    "        self.gene_to_TF_transform_matrix=torch.tensor(gene_to_TF_transform_matrix,dtype=torch.float32)\n",
    "    \n",
    "        \n",
    "        self.bn0=nn.BatchNorm1d(self.gene_number)\n",
    "        #self.fc1=CustomizedLinear(in_size,2290,mask=gen_mask(3443,2290,ratio[0]))  \n",
    "        #self.fc1=CustomizedLinear(in_size,1946,mask=gen_mask(2903,1946,ratio[0]))        \n",
    "        self.fc1=CustomizedLinear(in_size,self.GO_number,mask=GO_mask)    #GO_term\n",
    "        self.gene_to_GO_layer=CustomizedLinear(in_size,self.GO_number,mask=GO_mask)    #GO_term\n",
    "        #self.fc1=CustomizedLinear(in_size,2290,mask=np.ones((3443,2290)))\n",
    "    \n",
    "        self.bn1=nn.BatchNorm1d(self.GO_number)\n",
    "                \n",
    "        self.fc2=CustomizedLinear(self.GO_number,out_size,mask=gen_mask(self.GO_number,out_size,ratio[1]))\n",
    "        self.bn2=nn.BatchNorm1d(out_size)\n",
    "\n",
    "        self.gene_to_TF_layer=CustomizedLinear(self.gene_number,self.TF_number,mask=TF_mask)\n",
    "        self.TF_to_GO_layer=CustomizedLinear(self.TF_number,self.GO_number,mask=GO_TF_mask)\n",
    "        \n",
    "        self.fc3=CustomizedLinear(100,100,mask=gen_mask(100,100,ratio[1]))\n",
    "\n",
    "        self.fc4=CustomizedLinear(100,out_size,mask=gen_mask(100,out_size,ratio[1]))\n",
    "        \n",
    "        self.relu=nn.ReLU()\n",
    "        self.leaky_relu=nn.LeakyReLU()\n",
    "        #self.dropout = nn.Dropout(0.1)\n",
    "        for module in self.modules():\n",
    "            if isinstance(module,nn.Linear):\n",
    "                nn.init.uniform_(module.weight,a=0,b=1)\n",
    "            elif isinstance(module,(nn.BatchNorm1d,nn.GroupNorm)):\n",
    "                nn.init.constant_(module.weight,1)\n",
    "                nn.init.constant_(module.bias,0)\n",
    "\n",
    "                        \n",
    "    def forward(self,x):\n",
    "\n",
    "        #x=self.bn0(x)\n",
    "        TF_residul=torch.matmul(x,self.gene_to_TF_transform_matrix)\n",
    "\n",
    "        TF_derived_from_gene=self.gene_to_TF_layer(x)\n",
    "\n",
    "        TF_sum=TF_residul+TF_derived_from_gene\n",
    "        #TF_sum=TF_derived_from_gene\n",
    "\n",
    "        GO_derived_from_TF=self.TF_to_GO_layer(TF_sum)\n",
    "\n",
    "        GO_derived_from_gene=self.gene_to_GO_layer(x)\n",
    "\n",
    "        GO_sum=GO_derived_from_TF+GO_derived_from_gene\n",
    "\n",
    "        #x=self.bn0(x)\n",
    "        #x=self.fc1(x)\n",
    "        #x=self.bn1(x)\n",
    "        #x=self.relu(x)\n",
    "        #x=self.dropout(x)\n",
    "        GO_sum=self.leaky_relu(GO_sum)\n",
    "\n",
    "        #x=torch.tanh(x) \n",
    "        #print(161,self.fc1.weight)\n",
    "        x=self.fc2(GO_sum)\n",
    "        #x=self.bn2(x)\n",
    "        #x=self.relu(x)\n",
    "        #x=self.leaky_relu(x)\n",
    "        #x=self.fc3(x)\n",
    "        #x=self.leaky_relu(x)\n",
    "        #x=self.fc4(x)\n",
    " \n",
    "        return x,GO_sum,TF_derived_from_gene,GO_derived_from_TF\n",
    "\n",
    "\"\"\"\n",
    "class Reconstraction(nn.Module):\n",
    "    def __init__(self,in_size,out_size):\n",
    "        super(Reconstraction,self).__init__()\n",
    "\n",
    "        self.decoder = nn.Sequential(\n",
    "            nn.Linear(in_size, 500),\n",
    "            nn.LeakyReLU(True),\n",
    "            nn.Linear(500, 500),\n",
    "            nn.LeakyReLU(True),\n",
    "            nn.Linear(500, 500),\n",
    "            nn.LeakyReLU(True),\n",
    "            nn.Linear(500, 1000),\n",
    "            nn.LeakyReLU(True),\n",
    "            nn.Linear(1000, out_size)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.decoder(x)\n",
    "        return x\n",
    "\"\"\"     \n",
    "\n",
    "\n",
    " \n",
    "class MyDataset(Dataset):\n",
    "    def __init__(self, x,y):\n",
    "        self.x=x\n",
    "        self.y=y\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        features = self.x[index]\n",
    "        label = self.y[index]\n",
    "        return features, label\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.x)\n",
    "\n",
    "def accuracy_score(y_test,y_pred):\n",
    "    t=0\n",
    "    f=0\n",
    "    for i in range(len(y_test)):\n",
    "        if y_test[i]==y_pred[i]:\n",
    "            t+=1\n",
    "        else:\n",
    "            f+=1\n",
    "    return(t/(t+f))\n",
    "\n",
    "\n",
    "\n",
    "from torch.utils.data import WeightedRandomSampler\n",
    "\n",
    "def make_weights_for_balanced_classes(dataset, nclasses):\n",
    "    count = [0] * nclasses\n",
    "    for item in dataset:\n",
    "        count[item[1]] += 1\n",
    "    weight_per_class = [0.] * nclasses\n",
    "    N = float(sum(count))\n",
    "    for i in range(nclasses):\n",
    "        weight_per_class[i] = N/float(count[i])\n",
    "    weight = [0] * len(dataset)\n",
    "    for idx, val in enumerate(dataset):\n",
    "        weight[idx] = weight_per_class[val[1]]\n",
    "    return weight\n",
    "\n",
    "\n",
    "class CustomWeightedRandomSampler(WeightedRandomSampler):\n",
    "    \"\"\"WeightedRandomSampler except allows for more than 2^24 samples to be sampled\"\"\"\n",
    "    def __init__(self, *args, **kwargs):\n",
    "        super().__init__(*args, **kwargs)\n",
    "\n",
    "    def __iter__(self):\n",
    "        rand_tensor = np.random.choice(range(0, len(self.weights)),\n",
    "                                       size=self.num_samples,\n",
    "                                       p=self.weights.numpy() / torch.sum(self.weights).numpy(),\n",
    "                                       replace=self.replacement)\n",
    "        rand_tensor = torch.from_numpy(rand_tensor)\n",
    "        return iter(rand_tensor.tolist())\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#training\n",
    "input_size = len(data_rm_sparse.columns)\n",
    "output_size = len(classes)\n",
    "\n",
    "learning_rate = 0.1\n",
    "epochs = 3\n",
    "\n",
    "\n",
    "#reconstraction_optimizer = optim.Adam(reconstraction_model.parameters(), lr=0.001)\n",
    "\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "#reconstraction_criterion = nn.MSELoss()\n",
    "\n",
    "\n",
    "\n",
    "data_train_x=data_rm_sparse\n",
    "data_train_y=data_rm_sparse.index\n",
    "\n",
    "\n",
    "#5-fold cross validation\n",
    "import numpy as np\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "num_folds = 5\n",
    "\n",
    "# Generate 5-fold cross-validation indices\n",
    "kf = KFold(n_splits=num_folds, shuffle=True)\n",
    "fold_indices = list(kf.split(data))\n",
    "\n",
    "# Perform 5-fold cross-validation\n",
    "for fold, (train_indices, test_indices) in enumerate(fold_indices, start=1):\n",
    "\n",
    "    #define model and optimizer\n",
    "    model = GO_Net(input_size, output_size,ratio=[0,0,0])\n",
    "    optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
    "\n",
    "\n",
    "    # Subset data and annotation based on indices\n",
    "    x_train = data_train_x.iloc[train_indices].to_numpy()\n",
    "    y_train = data_train_y[train_indices,]\n",
    "    \n",
    "    x_test = data_train_x.iloc[test_indices].to_numpy()\n",
    "    y_test = data_train_y[test_indices,]\n",
    "\n",
    "    # Continue with your operations on data_train, anno_train, data_test, and anno_test\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    #x_train,x_test,y_train,y_test = ts(data_train_x.to_numpy(),data_train_y.to_numpy(),test_size=0.2,random_state=1, shuffle=True)\n",
    "\n",
    "    #x_train=x_train[0:400]\n",
    "    #y_train=y_train[0:400]\n",
    "\n",
    "    #label_dict={25:0,26:1,27:2,33:3,34:4}\n",
    "    y_train_relabeled=[label_dict[label] for label in y_train]\n",
    "    y_test_relabeled=[label_dict[label] for label in y_test]\n",
    "\n",
    "\n",
    "    #train_size=20000\n",
    "\n",
    "    #x_train=x_train[0:train_size]\n",
    "    #y_train_relabeled=y_train_relabeled[0:train_size]\n",
    "\n",
    "    train_data=MyDataset(x_train,y_train_relabeled)\n",
    "\n",
    "\n",
    "\n",
    "    #for unbalanced data\n",
    "    \"\"\"\n",
    "    weights=make_weights_for_balanced_classes(train_data,len(classes))\n",
    "    weights = torch.DoubleTensor(weights)\n",
    "    sampler = CustomWeightedRandomSampler(weights, len(weights))        #sampler for imbalanced classes\n",
    "    \"\"\"\n",
    "\n",
    "    #train_loader=DataLoader(train_data, batch_size=60, sampler=sampler)\n",
    "    train_loader=DataLoader(train_data, batch_size=60, shuffle=True)\n",
    "\n",
    "    num_epochs=15\n",
    "    # 训练模型\n",
    "    for epoch in range(num_epochs):\n",
    "        tic=time.time()\n",
    "        running_loss = 0.0\n",
    "        reconstraction_running_loss = 0.0\n",
    "\n",
    "        for i, batch in enumerate(train_loader, 0):\n",
    "            inputs, labels = batch\n",
    "            #print(labels)\n",
    "            inputs=Variable(inputs).to(torch.float32)\n",
    "            labels=Variable(labels).to(torch.long)\n",
    "            # 将梯度缓存清零\n",
    "            optimizer.zero_grad()\n",
    "\n",
    "            # 前向传播、计算损失和反向传播\n",
    "            outputs,_,_,_ = model(inputs)\n",
    "\n",
    "            loss = criterion(outputs, labels)\n",
    "\n",
    "            #reconstraction_input=reconstraction_model(outputs)\n",
    "            #reconstraction_loss = reconstraction_criterion(reconstraction_input, inputs)\n",
    "\n",
    "            #reconstraction_optimizer.zero_grad()\n",
    "\n",
    "            #combined_loss=loss+reconstraction_loss\n",
    "            #combined_loss.backward()\n",
    "            loss.backward()\n",
    "        \n",
    "            optimizer.step()\n",
    "            #reconstraction_optimizer.step()\n",
    "\n",
    "\n",
    "            #reconstraction_running_loss += reconstraction_loss.item()\n",
    "            running_loss += loss.item()\n",
    "\n",
    "            if i % 40 == 0:\n",
    "                pass\n",
    "                #print(i)\n",
    "                #print('[%d, %5d] loss: %.3f' % (epoch + 1, i + 1, running_loss / 200))\n",
    "            \n",
    "            if i>400:\n",
    "                break\n",
    "\n",
    "        test_data=MyDataset(x_test,y_test_relabeled)\n",
    "        test_loader=DataLoader(test_data, batch_size=32, shuffle=False)\n",
    "        result=[]\n",
    "        for i, batch in enumerate(test_loader):\n",
    "            inputs, labels = batch\n",
    "            \n",
    "            inputs=Variable(inputs).to(torch.float32)\n",
    "\n",
    "            labels=Variable(labels).to(torch.long)\n",
    "            \n",
    "            outputs,_,_,_ = model(inputs)\n",
    "            pred = list(torch.max(outputs, 1)[1].numpy())\n",
    "            result.extend(pred)\n",
    "            #print(pred,labels)\n",
    "            if i>100:\n",
    "                break\n",
    "        accuracy = accuracy_score(y_test_relabeled[0:len(result)],result)\n",
    "        f1_score = 0\n",
    "                #########\n",
    "\n",
    "        toc=time.time()\n",
    "        print(\"fold %s-%s\" %(fold,epoch),\"\\taccuracy:\\t\",accuracy,\"\\tloss:\\t\",running_loss / len(train_loader),\" \\tf1 score:\\t\",f1_score, \"\\ttime:\\t\", toc-tic )\n",
    "        \n",
    "        #save model\n",
    "        #pickle.dump(model,open(\"model/GO_heart.model\",\"wb\"))\n",
    "        \n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data=MyDataset(x_test,y_test_relabeled)\n",
    "test_loader=DataLoader(test_data, batch_size=32, shuffle=False)\n",
    "\n",
    "result=[]\n",
    "for i, batch in enumerate(test_loader):\n",
    "    inputs, labels = batch\n",
    "            \n",
    "    inputs=Variable(inputs).to(torch.float32)\n",
    "\n",
    "    labels=Variable(labels).to(torch.long)\n",
    "            \n",
    "    outputs,_,_,_ = model(inputs)\n",
    "    pred = list(torch.max(outputs, 1)[1].numpy())\n",
    "    result.extend(pred)\n",
    "    #print(pred,labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G2M',\n",
       " 'G2M',\n",
       " 'S',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " 'G1',\n",
       " ...]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicted_celltype=[label_dict_revese[i] for i in result]\n",
    "\n",
    "predicted_celltype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 260x230 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 229,
       "width": 260
      }
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/wuyou/.conda/envs/sc/lib/python3.8/site-packages/plotnine/ggplot.py:587: PlotnineWarning: Saving 2.6 x 2.3 in image.\n",
      "/home/wuyou/.conda/envs/sc/lib/python3.8/site-packages/plotnine/ggplot.py:588: PlotnineWarning: Filename: figure/senescence_phase_prediction.pdf\n"
     ]
    }
   ],
   "source": [
    "#umap of total dataset\n",
    "\n",
    "\n",
    "from plotnine import *\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "black = '#222222'\n",
    "gray = '#666666'\n",
    "red = '#FF3333'\n",
    "green = '#66CC00'\n",
    "blue = '#3333FF'\n",
    "purple = '#9933FF'\n",
    "orange = '#FF8000'\n",
    "yellow = '#FFFF33'\n",
    "salmen = \"#FA8072\"\n",
    "limegreen = '#32CD32'\n",
    "deepskyblue = '#00AFEE'\n",
    "c1=\"#F8766D\"\n",
    "c2=\"#00BA38\"\n",
    "c3=\"#619CFF\"\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "embedding = data.obsm[\"X_umap\"]\n",
    "\n",
    "plot_data=pd.DataFrame(embedding,columns=[\"UMAP1\",\"UMAP2\"])\n",
    "\n",
    "plot_data[\"phase\"]=phase\n",
    "\n",
    "plot_data=plot_data.iloc[test_indices]\n",
    "plot_data[\"phase\"]=predicted_celltype\n",
    "#plot_data[\"score\"]=score\n",
    "\n",
    "p =(ggplot()\n",
    "    + geom_point(plot_data, aes(x='UMAP1', y='UMAP2', color=\"phase\"),size=0.001,stroke=0.3,alpha=1)\n",
    "    #+ geom_point(data_not_indrop, aes(x='UMAP1', y='UMAP2',color=\"factor(Technology)\"),size=0.001,alpha=1)\n",
    "    +theme(\n",
    "        figure_size=[2.6,2.3],\n",
    "        axis_text=element_text(size=6,family=\"Arial\",color=\"black\"),\n",
    "        axis_title_x=element_text(size=6,family=\"Arial\",color=\"black\"),\n",
    "        axis_title_y=element_text(size=6,family=\"Arial\",color=\"black\"),\n",
    "        plot_title=element_text(margin={'b': 1, 'r': 0, 'units': 'pt'},size=6,family=\"Arial\",color=\"black\",hjust=0.5),\n",
    "        panel_background=element_rect(fill=gray, alpha=0),\n",
    "        panel_grid_major=element_line(size=0.3, alpha=0.0,color=black),\n",
    "        panel_grid_minor=element_line(size=0.3, alpha=0.0,color=black),\n",
    "        panel_border=element_rect(color=black, size=1),\n",
    "        legend_title = element_text(size=6,alpha=0), #change legend title font size\n",
    "        legend_text = element_text(size=6),\n",
    "        legend_background=element_rect(size=0.5,alpha=0),\n",
    "        #legend_position=(0.75,0.9), \n",
    "        legend_direction='vertical',\n",
    "        #legend_position='right',\n",
    "        legend_key_size=4) #change legend text font size))\n",
    "    #+scale_color_manual(values =[c1, c2, c3]) \n",
    "    #+geom_density_2d(colour = \"#F8766D\",size=0.2,data=data_U,alpha=0.5)\n",
    "    #+geom_density_2d(colour = \"#00BA38\",size=0.2,data=data_psU,alpha=0.5)\n",
    "    +ggtitle(\"Cell cycle phase predicted by scGO\")\n",
    "    #+scale_color_gradient(low=deepskyblue , high=yellow,mid=c2)\n",
    "    #+scale_color_gradient(low=purple , high=\"yellow\",mid=c2)\n",
    "    #+scale_color_manual(values=['#66C2A4', '#B2DF8A', '#2CA25F'])  \n",
    "    #+scale_color_manual(values=['#bfff7f', '#ffff7f', '#ffbf7f'])  \n",
    "   )\n",
    "#+ facet_wrap('G')\n",
    "print(p)\n",
    "p.save('figure/senescence_phase_prediction.pdf')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "S 0.9905195056175827\n",
      "G2M 0.9973548278633024\n",
      "G1 0.9976977648103913\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 260x220 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 220,
       "width": 260
      }
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "S 0.9456400208287487\n",
      "G2M 0.9903070136028315\n",
      "G1 0.9988453265622149\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 260x220 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 220,
       "width": 260
      }
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/wuyou/.conda/envs/sc/lib/python3.8/site-packages/plotnine/ggplot.py:587: PlotnineWarning: Saving 2.6 x 2.2 in image.\n",
      "/home/wuyou/.conda/envs/sc/lib/python3.8/site-packages/plotnine/ggplot.py:588: PlotnineWarning: Filename: figure/senescence_cell_cycle_phase_PR.pdf\n"
     ]
    }
   ],
   "source": [
    "#ROC plot\n",
    "\n",
    "from sklearn.metrics import roc_curve, auc,precision_recall_curve\n",
    "from plotnine import *\n",
    "import torch.nn.functional as F\n",
    "\n",
    "y_prob=[]\n",
    "y_test=[]\n",
    "test_data=MyDataset(x_test,y_test_relabeled)\n",
    "test_loader=DataLoader(test_data, batch_size=2000, shuffle=False)\n",
    "\n",
    "for i, data in enumerate(test_loader,0):\n",
    "    inputs, labels = data\n",
    "        \n",
    "    inputs=Variable(inputs).to(torch.float32)\n",
    "    labels=Variable(labels).to(torch.long)\n",
    "        \n",
    "    outputs,_,_,_ = model(inputs)\n",
    "    pred = list(torch.max(outputs, 1)[1].numpy())\n",
    "\n",
    "    outputs  = F.softmax(outputs , dim=1)\n",
    "    \n",
    "    y_prob=outputs.detach().numpy() \n",
    "    y_test=labels.detach().numpy() \n",
    "    break\n",
    "\n",
    "\n",
    "one_hot_code_dict={\n",
    "    0:[1,0,0,0,0,0,0,0,0,0,0],\n",
    "    1:[0,1,0,0,0,0,0,0,0,0,0],\n",
    "    2:[0,0,1,0,0,0,0,0,0,0,0],\n",
    "    3:[0,0,0,1,0,0,0,0,0,0,0],\n",
    "    4:[0,0,0,0,1,0,0,0,0,0,0],\n",
    "    5:[0,0,0,0,0,1,0,0,0,0,0],\n",
    "    6:[0,0,0,0,0,0,1,0,0,0,0],\n",
    "    7:[0,0,0,0,0,0,0,1,0,0,0],\n",
    "    8:[0,0,0,0,0,0,0,0,1,0,0],\n",
    "    9:[0,0,0,0,0,0,0,0,0,1,0],\n",
    "    10:[0,0,0,0,0,0,0,0,0,0,1]\n",
    "}\n",
    "\n",
    "y_test=np.array([one_hot_code_dict[label] for label in y_test])\n",
    "\n",
    "fprs=[]\n",
    "tprs=[]\n",
    "\n",
    "celltypes=[]\n",
    "\n",
    "n_classes = y_prob.shape[1]  # Number of classes\n",
    "\n",
    "roc_auc=[]\n",
    "pr_auc=[]\n",
    "\n",
    "for i in range(n_classes):\n",
    "    fpr, tpr, _ = roc_curve(y_test[:, i], y_prob[:, i])\n",
    "    roc_auc.extend([auc(fpr,tpr)]*len(fpr))\n",
    "    pr_auc.extend([auc(recall,precision)]*len(fpr))\n",
    "    #print(fpr)\n",
    "    fprs.extend(list(fpr))\n",
    "    tprs.extend(list(tpr))\n",
    "    \n",
    "    celltypes.extend([label_dict_revese[i]]*len(fpr))\n",
    "\n",
    "    print(label_dict_revese[i], auc(fpr,tpr))\n",
    "    \n",
    "\n",
    "black = '#222222'\n",
    "gray = '#666666'\n",
    "red = '#FF3333'\n",
    "green = '#66CC00'\n",
    "blue = '#3333FF'\n",
    "purple = '#9933FF'\n",
    "orange = '#FF8000'\n",
    "yellow = '#FFFF33'\n",
    "c1=\"#F8766D\"\n",
    "c2=\"#00BA38\" \n",
    "c3=\"#619CFF\"\n",
    "\n",
    "data=pd.DataFrame(dict(fpr=fprs,tpr=tprs,celltypes=celltypes)) \n",
    "p = (ggplot()\n",
    "        +geom_line(data,aes(x=\"fpr\",y = \"tpr\",group=\"celltypes\",color='celltypes'))\n",
    "        +geom_line(pd.DataFrame(dict(x=[0,1],y=[0,1])),aes(x=\"x\",y=\"y\"),linetype=\"dashed\",alpha=0.3)\n",
    "        +theme(panel_background=element_rect(fill=gray, alpha=0),\n",
    "            panel_grid_major=element_line(size=0.3, alpha=0.01,color=black),\n",
    "            panel_grid_minor=element_line(size=0.3, alpha=0.01,color=black),\n",
    "            panel_border=element_rect(color=black, size=1),\n",
    "            axis_text=element_text(size=6,family=\"Arial\",color=\"black\"),\n",
    "            axis_title_x=element_text(size=6,family=\"Arial\",color=\"black\"),\n",
    "            axis_title_y=element_text(size=6,family=\"Arial\",color=\"black\"),\n",
    "            plot_title=element_text(margin={'b': 1, 'r': 0, 'units': 'pt'},size=6,family=\"Arial\",color=\"black\"),\n",
    "            figure_size=[2.6,2.2],\n",
    "            legend_title = element_text(size=6), #change legend title font size\n",
    "            legend_text = element_text(size=6),\n",
    "            legend_background=element_rect(size=0.5,alpha=0),\n",
    "            #legend_position=(1.5,0.4),\n",
    "            legend_key_size=4) #change legend text font size\n",
    "        +labs(x = \"False positive\", y =\"True positive\")\n",
    "        +guides(color = guide_legend(title = \"Phase\"))\n",
    "        #+ggtitle(\"Balanced training data\")\n",
    ")\n",
    "print(p)\n",
    "#p.save('figure/ROC_zheng68k_raw_training_data.pdf')\n",
    "\n",
    "\n",
    "\n",
    "precisions=[]\n",
    "recalls=[]\n",
    "celltypes=[]\n",
    "for i in range(n_classes):\n",
    "    precision,recall,thersholds=precision_recall_curve(y_test[:, i], y_prob[:, i])\n",
    "    precisions.extend(list(precision))\n",
    "    recalls.extend(list(recall))\n",
    "    celltypes.extend([label_dict_revese[i]]*len(precision))\n",
    "    print(label_dict_revese[i], auc(recall,precision))\n",
    "    \n",
    "data=pd.DataFrame(dict(precision=precisions,recall=recalls,celltypes=celltypes)) \n",
    "p = (ggplot()\n",
    "        \n",
    "        +geom_line(data,aes(x=\"precision\",y = \"recall\",group=\"celltypes\",color='celltypes'))\n",
    "        #+geom_line(pd.DataFrame(dict(x=[0,1],y=[0,1])),aes(x=\"x\",y=\"y\"),linetype=\"dashed\",alpha=0.3)\n",
    "        \n",
    "        +theme(panel_background=element_rect(fill=gray, alpha=0),\n",
    "            panel_grid_major=element_line(size=0.3, alpha=0.01,color=black),\n",
    "            panel_grid_minor=element_line(size=0.3, alpha=0.01,color=black),\n",
    "            panel_border=element_rect(color=black, size=1),\n",
    "            axis_text=element_text(size=6,family=\"Arial\",color=\"black\"),\n",
    "            axis_title_x=element_text(size=6,family=\"Arial\",color=\"black\"),\n",
    "            axis_title_y=element_text(size=6,family=\"Arial\",color=\"black\"),\n",
    "            plot_title=element_text(margin={'b': 1, 'r': 0, 'units': 'pt'},size=6,family=\"Arial\",color=\"black\"),\n",
    "            figure_size=[2.6,2.2],\n",
    "            legend_title = element_text(size=6), #change legend title font size\n",
    "            legend_text = element_text(size=6),\n",
    "            legend_background=element_rect(size=0.5,alpha=0),\n",
    "            #legend_position=(1.5,0.4),\n",
    "            legend_key_size=4) #change legend text font size\n",
    "        +labs(x = \"Recall\", y =\"Precision\",title=\"Precision-recall curves for cell cycle annotation\")\n",
    "        +guides(color = guide_legend(title = \"Phase\"))\n",
    "        #+ggtitle(\"Balanced training data\")\n",
    "        +annotate(\"text\",x=0.3,y=0.12,label=\"AUC\\nS (0.946)\\nG2M (0.990) \\nG1 (0.999)\",ha=\"left\",size=6,color=\"black\")\n",
    ")\n",
    "print(p)\n",
    "p.save('figure/senescence_cell_cycle_phase_PR.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "94849582832896\n",
      "94849582832864\n"
     ]
    }
   ],
   "source": [
    "import copy\n",
    "\n",
    "old_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
    "new_list = copy.copy(old_list)\n",
    "\n",
    "print(\"Old list:\", old_list)\n",
    "print(\"New list:\", new_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
